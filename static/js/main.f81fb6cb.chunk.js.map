{"version":3,"sources":["App.js","serviceWorker.js","modules/searchComponent.js","modules/FoodComponent.js","app/Pagetwo.js","common/router/router.js","app/Home.js","index.js"],"names":["cardData","nama","kerjaan","Component","Boolean","window","location","hostname","match","Search","Input","SearchComponent","handleSearch","this","props","className","span","placeholder","enterButton","size","onSearch","value","FoodComponent","title","style","width","brand","ingridients","defaultProps","Pagetwo","Router","path","component","Home","state","foodData","searchWord","console","log","fetch","then","results","json","data","setState","foods","map","i","id","fdcId","description","brandOwner","type","to","ReactDOM","render","basename","process","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"sTAIMA,G,OAAW,CACf,CACEC,KAAO,UACPC,QAAU,oBAEZ,CACED,KAAO,QACPC,QAAU,eAIIC,YCHEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,6BCZEC,G,OAAWC,IAAXD,QAuBOE,E,iLAnBF,IACEC,EAAgBC,KAAKC,MAArBF,aACP,OACI,6BACI,kBAAC,IAAD,CAAKG,UAAU,cACX,kBAAC,IAAD,CAAKA,UAAU,aAAaC,KAAM,IAClC,kBAAC,EAAD,CACIC,YAAY,oBACZC,YAAY,SACZC,KAAK,QACLC,SAAU,SAAAC,GAAK,OAAIT,EAAaS,a,GAZ1BlB,aCHxBmB,E,iLAEE,OACI,yBAAKP,UAAU,QACX,kBAAC,IAAD,CAAMQ,MAAQV,KAAKC,MAAMS,MAAOC,MAAO,CAAEC,MAAO,MAC5C,4BAAI,sCAAeZ,KAAKC,MAAMY,OAC9B,4BAAKb,KAAKC,MAAMa,mB,GANRxB,aAa5BmB,EAAcM,aAAe,CACzBF,MAAQ,OACRC,YAAc,aAGHL,I,gBCZAO,E,iLAPP,OACI,6BACI,kD,GAJM1B,a,QCcP2B,E,iLATP,OACI,kBAAC,IAAD,KAEI,kBAAC,IAAD,CAAOC,KAAK,eAAeC,UAAaH,S,GALnC1B,aC8CN8B,E,YA1CX,aAAe,IAAD,8BACV,+CAEJC,MAAO,CACHC,SAAU,IAJA,EAOdvB,aAAe,SAACwB,GACZC,QAAQC,IAAIF,GAEZG,MAAM,8GAAgHH,GACrHI,MAAK,SAAAC,GACF,OAAOA,EAAQC,UAChBF,MAAK,SAAAG,GACJ,EAAKC,SAAS,CACVT,SAASQ,EAAKE,YAfZ,E,sEAsBQhC,KAAKqB,MAAMC,SAASW,KAAI,gBAAEC,EAAF,EAAEA,EAAF,MAAQ,CAC9CC,GAAKD,EAAEE,MACP1B,MAAQwB,EAAEG,YACVxB,MAAQqB,EAAEI,WACVxB,YAAcoB,EAAEpB,gBAEpB,OACI,6BACI,kBAAC,EAAD,CAAiBf,aAAgBC,KAAKD,eACtC,6BACA,kBAAC,IAAD,CAAQwC,KAAK,UAAS,kBAAC,IAAD,CAAMC,GAAG,gBAAT,YAItB,kBAAC,EAAD,W,GArCGlD,aCCnBmD,IAASC,OAAO,kBAAC,IAAD,CAAeC,SAAUC,cAAwB,kBAAC,EAAD,OAA0BC,SAASC,eAAe,SN0H7G,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,c","file":"static/js/main.f81fb6cb.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Card } from 'antd';\nimport './App.css';\n\nconst cardData = [\n  {\n    nama : \"Winston\",\n    kerjaan : \"Programmer(Amin)\"\n  },\n  {\n    nama : \"Siapa\",\n    kerjaan : \"Gabut gan\"\n  }\n]\n\nclass App extends Component {\n  constructor() {\n    super();\n  }\n\n  render()  {\n    return (\n      <div className=\"App\">{\n          cardData.map( data =>\n            <Card size=\"small\" title={data.nama} style={{ width: 300 }}>\n              <p>{data.kerjaan}</p>\n            </Card>\n          )\n      }\n      </div>\n    ); \n  }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { Component } from \"react\";\r\nimport React from \"react\";\r\nimport { Row, Col, Divider } from 'antd';\r\nimport { Input } from 'antd';\r\nimport '../assets/css/Search.css';\r\n\r\nconst { Search } = Input;\r\n\r\nclass SearchComponent extends Component{\r\n\r\n    render(){\r\n        const {handleSearch} = this.props;\r\n        return(\r\n            <div>\r\n                <Row className='search_bar'>\r\n                    <Col className=\"gutter-row\" span={24}>\r\n                    <Search\r\n                        placeholder=\"input search text\"\r\n                        enterButton=\"Search\"\r\n                        size=\"large\"\r\n                        onSearch={value => handleSearch(value)}\r\n                    />\r\n                    </Col>                    \r\n                </Row>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchComponent;","import { Component } from \"react\";\r\nimport React from 'react';\r\nimport { Card } from 'antd';\r\n\r\n\r\nclass FoodComponent extends Component {\r\n    render(){\r\n        return(\r\n            <div className=\"card\">\r\n                <Card title= {this.props.title} style={{ width: 300 }}>\r\n                    <h2><b>Brand: </b>{this.props.brand}</h2>\r\n                    <h3>{this.props.ingridients}</h3>\r\n                </Card>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nFoodComponent.defaultProps = {\r\n    brand : \"Merk\",\r\n    ingridients : \"Komposisi\"\r\n}\r\n\r\nexport default FoodComponent;","import React, { Component } from \"react\";\r\n\r\nclass Pagetwo extends Component{\r\n    render(){\r\n        return(\r\n            <div>\r\n                <h1>INI HALAMAN 2</h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Pagetwo;","import React, {Component} from 'react';\r\nimport Home from '../../app/Home';\r\nimport Pagetwo from '../../app/Pagetwo'\r\nimport {Switch, Route} from 'react-router-dom'\r\n\r\nclass Router extends Component{\r\n    render(){\r\n        return(\r\n            <Switch>\r\n                {/* <Route exact path=\"/\" component = {Home}/> */}\r\n                <Route path=\"/secondRoute\" component = {Pagetwo}/>\r\n            </Switch>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Router;","import React,{Component} from 'react';\r\nimport SearchComponent from '../modules/searchComponent';\r\nimport FoodComponent from '../modules/FoodComponent';\r\nimport Item from 'antd/lib/list/Item';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button } from 'antd';\r\nimport Router from '../common/router/router'\r\n\r\nclass Home extends Component{\r\n    constructor() {\r\n        super();\r\n      }\r\n    state ={\r\n        foodData: [],\r\n    }\r\n\r\n    handleSearch = (searchWord)=>{\r\n        console.log(searchWord);\r\n     \r\n        fetch('https://api.nal.usda.gov/fdc/v1/search?api_key=Bfcl4un0RfbButVtax6vjpOvlB8g0Nybdr4hEmCA&generalSearchInput=' + searchWord)\r\n        .then(results =>{\r\n            return results.json();\r\n        }).then(data=> {\r\n            this.setState({\r\n                foodData:data.foods\r\n            })\r\n        })\r\n    }\r\n\r\n    render(){\r\n\r\n        const foodItems = this.state.foodData.map(({i})=>({\r\n            id : i.fdcId,\r\n            title : i.description,\r\n            brand : i.brandOwner,\r\n            ingridients : i.ingridients,\r\n        })) \r\n        return(\r\n            <div>\r\n                <SearchComponent handleSearch = {this.handleSearch} />\r\n                <br/>\r\n                <Button type=\"dashed\"><Link to=\"/secondRoute\">Pagetwo</Link></Button>\r\n                {/* foodItems.map((item, key)=>(\r\n                    <FoodComponent title = {Item.title} brand = {item.brand} ingridients = {item.ingridients}/>\r\n                )) */}\r\n                <Router/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Home from '../src/app/Home';\nimport {BrowserRouter} from \"react-router-dom\";\n\n\nReactDOM.render(<BrowserRouter basename={process.env.PUBLIC_URL}><Home /></BrowserRouter>, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}